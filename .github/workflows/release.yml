name: Build and Release

on:
  push:
    tags:
      - 'v*'

jobs:
  build_wheel:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    strategy:
      matrix:
        pytorch_version: 
          - "2.4.0"
          - "2.5.1"
          - "2.6.0"
        include:
          - pytorch_version: "2.4.0"
            container_image: "pytorch/pytorch:2.4.0-cuda12.4-cudnn9-devel"
            artifact_name: "wheel-cuda12-pytorch240"
          - pytorch_version: "2.5.1"
            container_image: "pytorch/pytorch:2.5.1-cuda12.4-cudnn9-devel"
            artifact_name: "wheel-cuda12-pytorch251"
          - pytorch_version: "2.6.0"
            container_image: "pytorch/pytorch:2.6.0-cuda12.4-cudnn9-devel"
            artifact_name: "wheel-cuda12-pytorch260"
    container:
      image: ${{ matrix.container_image }}

    steps:
      - name: Install Git in container
        run: apt-get update && apt-get install -y git ca-certificates && git --version
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          submodules: true

      - name: Build wheel
        env:
          NV_PLATFORM: 1
        run: |
          cp /etc/apt/sources.list /etc/apt/sources.list.bak && \
              { \
              echo "deb https://mirrors.aliyun.com/ubuntu/ jammy main restricted universe multiverse"; \
              echo "deb https://mirrors.aliyun.com/ubuntu/ jammy-security main restricted universe multiverse"; \
              echo "deb https://mirrors.aliyun.com/ubuntu/ jammy-updates main restricted universe multiverse"; \
              echo "deb https://mirrors.aliyun.com/ubuntu/ jammy-backports main restricted universe multiverse"; \
              } > /etc/apt/sources.list
          apt-get update && apt-get install -y libomp-dev ca-certificates lsb-release wget && \
              wget https://packages.apache.org/artifactory/arrow/$(lsb_release --id --short | tr 'A-Z' 'a-z')/apache-arrow-apt-source-latest-$(lsb_release --codename --short).deb && \
              apt-get install -y ./apache-arrow-apt-source-latest-$(lsb_release --codename --short).deb && \
              apt-get update && \
              apt-get install -y libarrow-dev=21.0.0-1 liborc-dev
          mkdir /usr/local/lib64/ && \
              ln -s /usr/lib/x86_64-linux-gnu/libomp.so.5 /usr/local/lib64/libomp.so
          export TORCH_CUDA_ARCH_LIST='7.0;7.5;8.0;8.6;8.9;9.0'
          export INTERNAL_VERSION=0
          python setup.py bdist_wheel 

      - name: Upload wheel as artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact_name }}
          path: dist/*.whl

  build_column_io:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    strategy:
      matrix:
        pytorch_version: 
          - "2.4.0"
        include:
          - pytorch_version: "2.4.0"
            container_image: "pytorch/pytorch:2.4.0-cuda12.4-cudnn9-devel"
            artifact_name: "wheel-column-io"
    container:
      image: ${{ matrix.container_image }}

    steps:
      - name: Install Git in container
        run: apt-get update && apt-get install -y git ca-certificates && git --version
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          submodules: true

      - name: Build wheel
        run: |
          cp /etc/apt/sources.list /etc/apt/sources.list.bak && \
              { \
              echo "deb https://mirrors.aliyun.com/ubuntu/ jammy main restricted universe multiverse"; \
              echo "deb https://mirrors.aliyun.com/ubuntu/ jammy-security main restricted universe multiverse"; \
              echo "deb https://mirrors.aliyun.com/ubuntu/ jammy-updates main restricted universe multiverse"; \
              echo "deb https://mirrors.aliyun.com/ubuntu/ jammy-backports main restricted universe multiverse"; \
              } > /etc/apt/sources.list
          apt-get update && apt-get install -y libomp-dev ca-certificates lsb-release wget && \
              wget https://packages.apache.org/artifactory/arrow/$(lsb_release --id --short | tr 'A-Z' 'a-z')/apache-arrow-apt-source-latest-$(lsb_release --codename --short).deb && \
              apt-get install -y ./apache-arrow-apt-source-latest-$(lsb_release --codename --short).deb && \
              apt-get update && \
              apt-get install -y libarrow-dev=21.0.0-1 liborc-dev
          mkdir /usr/local/lib64/ && \
              ln -s /usr/lib/x86_64-linux-gnu/libomp.so.5 /usr/local/lib64/libomp.so
          export INTERNAL_VERSION=0
          cd third_party/column-io/
          python setup.py bdist_wheel 

      - name: Upload wheel as artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact_name }}
          path: third_party/column-io/dist/*.whl

  create_release:
    needs:
      - build_wheel
      - build_column_io
    runs-on: ubuntu-latest
    permissions:
      contents: write
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Extract release notes from CHANGELOG
        id: extract_changelog
        run: |
          # Extract the first section from CHANGELOG.md
          awk '/^# /{if (found==1) exit; found=1; next} found && NF' CHANGELOG.md > RELEASE_NOTES.md
          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          cat RELEASE_NOTES.md >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          release_name: Release ${{ github.ref_name }}
          body: ${{ steps.extract_changelog.outputs.changelog }}
          draft: false
          prerelease: false

  upload_assets:
    needs: create_release
    runs-on: ubuntu-latest
    permissions:
      contents: write
    strategy:
      matrix:
        artifact_name:
          - "wheel-cuda12-pytorch240"
          - "wheel-cuda12-pytorch251"
          - "wheel-cuda12-pytorch260"
          - "wheel-column-io"
    steps:
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ matrix.artifact_name }}
          path: ./wheels

      - name: Get wheel file name
        id: get_wheel_name
        run: |
          wheel_file=$(ls ./wheels/*.whl | head -n 1)
          wheel_name=$(basename "$wheel_file")
          echo "wheel_path=$wheel_file" >> $GITHUB_OUTPUT
          echo "wheel_name=$wheel_name" >> $GITHUB_OUTPUT

      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create_release.outputs.upload_url }}
          asset_path: ${{ steps.get_wheel_name.outputs.wheel_path }}
          asset_name: ${{ steps.get_wheel_name.outputs.wheel_name }}
          asset_content_type: application/octet-stream
